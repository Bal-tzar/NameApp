AWSTemplateFormatVersion: "2010-09-09"
Description: AWS CloudFormation Template to create a VPC, Subnet, Security Group, and an EC2 instance.

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: MyWinKey
  InstanceType:
    Type: String
    Default: t3.small
  AmiId:
    Type: String
    Default: ami-091a906f2e1e40076

Resources:

  # --- Networking ---
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: NameAppVPC

  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: eu-west-1a
      Tags:
        - Key: Name
          Value: NameAppSubnet

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable
  
  NamesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Names
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # --- EC2 Instance ---
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !Ref AmiId
      SecurityGroupIds:
        - sg-0d51fca68a7f91c7b
      IamInstanceProfile: DynamoDBFullAccess
      UserData:
         Fn::Base64: !Sub |
            #!/bin/bash
            dnf update -y
            dnf install docker -y
            systemctl enable --now docker
            usermod -aG docker ec2-user
            docker pull baltzar1994/nameapp:latest
            docker run -d -p 80:80 baltzar1994/nameapp:latest         
      Tags:
        - Key: Name
          Value: NameAppManager
  # --- Additional EC2 Instance for Worker Nodes ---
  
  WorkerNode1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !Ref AmiId
      SecurityGroupIds:
        - sg-0d51fca68a7f91c7b
      IamInstanceProfile: DynamoDBFullAccess
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            dnf update -y
            dnf install docker -y
            systemctl enable --now docker
            usermod -aG docker ec2-user        
      Tags:
        - Key: Name
          Value: NameAppWorker1

  WorkerNode2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !Ref AmiId
      SecurityGroupIds:
        - sg-0d51fca68a7f91c7b
      IamInstanceProfile: DynamoDBFullAccess
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            dnf update -y
            dnf install docker -y
            systemctl enable --now docker
            usermod -aG docker ec2-user        
      Tags:
        - Key: Name
          Value: NameAppWorker2

Outputs:
  InstanceId:
    Description: The EC2 instance ID
    Value: !Ref EC2Instance
  PublicIP:
    Description: The public IP of the EC2 instance
    Value: !GetAtt EC2Instance.PublicIp
  VPCId:
    Value: !Ref VPC
